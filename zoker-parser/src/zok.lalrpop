use crate::ast;
use crate::error::LexicalError;
use crate::lexer;
use crate::location;

grammar;

// All `pub`s are used for dev env.
// Only consume Global Statements
pub Program: ast::Program = {
    <g:GlobalStatements> => ast::Program::GlobalStatements(g),
};

GlobalStatements: Vec<ast::Statement> = {
    <mut stmts:GlobalStatements> <stmt:GlobalStatement> ";" => {
        stmts.push(stmt);
        stmts
    },
    <stmt:GlobalStatement> ";" => vec![stmt]
};

pub GlobalStatement: ast::Statement = {
    <expr:Expression> => ast::Statement {
        node: ast::StatementType::Expression {
            expression: Box::new(expr),
        },
    },
    FunctionStatement,
};

FunctionStatement: ast::Statement = {
    "function" <id:Identifier> <params:Parameters> <stmt:CompoundStatement> => ast::Statement {
        node: ast::StatementType::FunctionStatement {
            function_name: Box::new(id),
            parameters: Box::new(params),
            statement: Box::new(stmt),
        }
    },
};

Statements: Vec<ast::Statement> = {
    <mut stmts:Statements> <stmt:Statement> ";" => {
        stmts.push(stmt);
        stmts
    },
    <stmt:Statement> ";" => vec![stmt]
};

/// Description for Statement
/// Only consumed by function
///
/// Compound Statement
/// { Statements }
/// Expression
pub Statement: ast::Statement = {
    CompoundStatement,
    <expr:Expression> => ast::Statement {
        node: ast::StatementType::Expression {
            expression: Box::new(expr),
        },
    },
    // TODO: For statement should be added. (No support Zkp)
};

InitializerExpression: ast::Expression = {
    // TODO: Initializer Expression should be moved to Statement.
    <var_type:Type> <var_name: Identifier> <default:("=" Expression)?> => ast::Expression {
        node: ast::ExpressionType::InitializerExpression {
            variable_type: var_type,
            variable: Box::new(var_name),
            default: default.map_or(None, |x| Some(Box::new(x.1))),
        }
    },
};

CompoundStatement: ast::Statement = {
    "{" <stmt:Statements?> <return_value:Expression?>"}" => ast::Statement {
        node: ast::StatementType::CompoundStatement {
            statements: stmt.map_or(vec![], |x| x),
            return_value: return_value.map_or(None, |x| Some(Box::new(x))),
        }
    },
};

IfExpression: ast::Expression = {
    "if" <expr:Expression> <if_stmt:CompoundStatement> <else_stmt:("else" CompoundStatement)?> => ast::Expression {
        node: ast::ExpressionType::IfExpression {
            condition: Box::new(expr),
            if_statement: Box::new(if_stmt),
            else_statement: else_stmt.map_or(None, |x| Some(Box::new(x.1))),
        }
    },
};

ForEachExpression: ast::Expression = {
    "for" <iter:Expression> "in" <vector:Expression> <stmt:CompoundStatement> <else_stmt:("else" CompoundStatement)?> => ast::Expression {
        node: ast::ExpressionType::ForEachExpression {
            iterator: Box::new(iter),
            vector: Box::new(vector),
            statement: Box::new(stmt),
            else_statement: else_stmt.map_or(None, |x| Some(Box::new(x.1))),
        }
    },
};

/// Separate Expression grammar for priority
///
/// Priority
/// 1.
/// If Expression (if { stmts result } else { stmts result }
/// For Each Expression ( for in { stmts result } )
/// Function Call Expression ( func ( args ) )
/// 2.
/// Arithmetic Expression ( +, -, *, /, %, ** )
/// 3.
/// Comparision Expression ( ==, !=, <, <=, >, >= )
/// 4.
/// Bit Expression ( &, |, ^ )
/// 5.
/// Logical Expression ( &&, || )
/// - except
/// Assign Expression ( =, &=, |=, ^=, <<=, >>=, +=, -=, *=, /=, %= )
pub Expression: ast::Expression = {
    InitializerExpression,
    FunctionCallExpression,
    IfExpression,
    ForEachExpression,
    BinaryExpression,
};

FunctionCallExpression: ast::Expression = {
    <id:Identifier> <args:Arguments> => ast::Expression {
    node: ast::ExpressionType::FunctionCallExpression {
            function_name: Box::new(id),
            arguments: Box::new(args),
        }
    },
};

BinaryExpression: ast::Expression = {
    LogicalOrExpression,
    AssignExpression,
};

AssignExpression: ast::Expression = {
    <l:Identifier> <op:AssignOperator> <r:Expression> => ast::Expression {
        node: ast::ExpressionType::AssignExpression {
            left: Box::new(l),
            operator: op,
            right: Box::new(r),
        }
    },
};

AssignOperator: ast::Operator = {
    "=" => ast::Operator::Assign,
    "&=" => ast::Operator::BitAndAssign,
    "|=" => ast::Operator::BitOrAssign,
    "^=" => ast::Operator::BitXorAssign,
    "<<=" => ast::Operator::LShiftAssign,
    ">>=" => ast::Operator::RShiftAssign,
    "+=" => ast::Operator::AddAssign,
    "-=" => ast::Operator::SubAssign,
    "*=" => ast::Operator::MulAssign,
    "/=" => ast::Operator::DivAssign,
    "%=" => ast::Operator::ModAssign,
};

LogicalOrExpression: ast::Expression = {
    <l:LogicalOrExpression> "||" <r:LogicalAndExpression> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: ast::Operator::Or,
            right: Box::new(r),
        }
    },
    LogicalAndExpression,
};

LogicalAndExpression: ast::Expression = {
    <l:LogicalAndExpression> "&&" <r:BitOrExpression> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: ast::Operator::And,
            right: Box::new(r),
        }
    },
    BitOrExpression,
};

BitOrExpression: ast::Expression = {
    <l:BitOrExpression> "|" <r:BitXorExpression> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: ast::Operator::BitOr,
            right: Box::new(r),
        }
    },
    BitXorExpression,
};

BitXorExpression: ast::Expression = {
    <l:BitXorExpression> "^" <r:BitAndExpression> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: ast::Operator::BitXor,
            right: Box::new(r),
        }
    },
    BitAndExpression,
};

BitAndExpression: ast::Expression = {
    <l:BitAndExpression> "&" <r:ComparisonExpression1> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: ast::Operator::BitAnd,
            right: Box::new(r),
        }
    },
    ComparisonExpression1,
};

ComparisonExpression1: ast::Expression = {
    <l:ComparisonExpression1> <op:ComparisonOperator1> <r:ComparisonExpression2> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: op,
            right: Box::new(r),
        }
    },
    ComparisonExpression2,
};

ComparisonOperator1: ast::Operator = {
    "==" => ast::Operator::Eq,
    "!=" => ast::Operator::NotEq,
};

ComparisonExpression2: ast::Expression = {
    <l:ComparisonExpression2> <op:ComparisonOperator2> <r:ArithmeticExpression1> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: op,
            right: Box::new(r),
        }
    },
    ArithmeticExpression1,
};

ComparisonOperator2: ast::Operator = {
    "<" => ast::Operator::Lt,
    "<=" => ast::Operator::Le,
    ">" => ast::Operator::Gt,
    ">=" => ast::Operator::Ge,
};

/// Separate Arithmetic Expression grammar for priority
///
/// Priority
/// 1.
/// ** (power operator)
/// 2.
/// * (multiplication), / (division), % (modulus)
/// 3.
/// + (addition), - (subtraction)
ArithmeticExpression1: ast::Expression = {
    <l:ArithmeticExpression1> <op:ArithmeticOperator1> <r:ArithmeticExpression2> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: op,
            right: Box::new(r),
        }
    },
    ArithmeticExpression2,
};

ArithmeticOperator1: ast::Operator = {
    "+" => ast::Operator::Add,
    "-" => ast::Operator::Sub,
};

ArithmeticExpression2: ast::Expression = {
    <l:ArithmeticExpression2> <op:ArithmeticOperator2> <r:PowerExpression> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: op,
            right: Box::new(r),
        }
    },
    PowerExpression,
};

ArithmeticOperator2: ast::Operator = {
    "*" => ast::Operator::Mul,
    "/" => ast::Operator::Div,
    "%" => ast::Operator::Mod,
};

PowerExpression: ast::Expression = {
    <l:Value> <op:PowerOperator> <r:Value> => ast::Expression {
        node: ast::ExpressionType::BinaryExpression {
            left: Box::new(l),
            operator: op,
            right: Box::new(r),
        }
    },
    UnaryExpression,
};

PowerOperator: ast::Operator = {
    "**" => ast::Operator::Pow,
};

UnaryExpression: ast::Expression = {
    <v:Terminal> <op:PostfixUnaryOperator> => ast::Expression {
        node: ast::ExpressionType::UnaryExpression {
            operator: op,
            expression: Box::new(v),
        }
    },
    <op:PrefixUnaryOperator> <v:Terminal> => ast::Expression {
        node: ast::ExpressionType::UnaryExpression {
            operator: op,
            expression: Box::new(v),
        }
    },
    Value,
};

PrefixUnaryOperator: ast::Operator = {
    "++" => ast::Operator::PrefixPlusPlus,
    "--" => ast::Operator::PrefixMinusMinus,
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
    "!" => ast::Operator::Not,
};

PostfixUnaryOperator: ast::Operator = {
    "++" => ast::Operator::PostfixPlusPlus,
    "--" => ast::Operator::PostfixMinusMinus,
};

ParameterList: Vec<ast::Expression> = {
    <mut params:ParameterList> "," <init:InitializerExpression> => {
        params.push(init);
        params
    },
    <init:InitializerExpression> => vec![init],
};

Parameters: ast::Expression = {
    "(" <ParameterList> ")" => ast::Expression {
        node: ast::ExpressionType::Parameters {
            parameters: <>,
        }
    },
    "(" ")" => ast::Expression {
        node: ast::ExpressionType::Parameters {
            parameters: vec![]
        }
    },
};

ArgumentList: Vec<ast::Expression> = {
    <mut args:ArgumentList> "," <expr:Expression> => {
        args.push(expr);
        args
    },
    <expr:Expression> => vec![expr],
};

Arguments: ast::Expression = {
    "(" <ArgumentList> ")" => ast::Expression {
        node: ast::ExpressionType::Arguments {
            arguments: <>
        }
    },
    "(" ")" => ast::Expression {
        node: ast::ExpressionType::Arguments {
            arguments: vec![]
        }
    },
};

Value: ast::Expression = {
    Terminal,
    "(" <Expression> ")",
};

Terminal: ast::Expression = {
    Number,
    Identifier,
};

Number: ast::Expression = {
    number => ast::Expression {
        node: ast::ExpressionType::Number { value: <> }
    },
};

Identifier: ast::Expression = {
    name => ast::Expression {
        node: ast::ExpressionType::Identifier { value: <> }
    },
};

Type: ast::Type = {
    // Static size
    "uint" => ast::Type::Uint256,
    "uint256" => ast::Type::Uint256,
    "int" => ast::Type::Int256,
    "int256" => ast::Type::Int256,
    "bytes32" => ast::Type::Bytes32,
    "bool" => ast::Type::Bool,

    // Dynamic Size
    "bytes" => ast::Type::Bytes,
    "string" => ast::Type::String,
    "address" => ast::Type::Address,
};


// Hook external lexer:
extern {
    type Location = location::Location;
    type Error = LexicalError;

    enum lexer::Tok {
        "*" => lexer::Tok::Mul,
        "/" => lexer::Tok::Div,
        "%" => lexer::Tok::Mod,
        // Power Operator
        "**" => lexer::Tok::Pow,
        // Unary Operator
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "!" => lexer::Tok::Not,
        // Increment Operator
        "++" => lexer::Tok::PlusPlus,
        "--" => lexer::Tok::MinusMinus,
        // Assign operator
        "=" => lexer::Tok::Assign,
        // Augmented Assign Operator
        "&=" => lexer::Tok::BitAndAssign,
        "^=" => lexer::Tok::BitXorAssign,
        "|=" => lexer::Tok::BitOrAssign,
        "<<=" => lexer::Tok::LShiftAssign,
        ">>=" => lexer::Tok::RShiftAssign,
        "+=" => lexer::Tok::AddAssign,
        "-=" => lexer::Tok::SubAssign,
        "*=" => lexer::Tok::MulAssign,
        "/=" => lexer::Tok::DivAssign,
        "%=" => lexer::Tok::ModAssign,
        // Comparison Operator
        "<" => lexer::Tok::Lt,
        "<=" => lexer::Tok::Le,
        ">" => lexer::Tok::Gt,
        ">=" => lexer::Tok::Ge,
        "==" => lexer::Tok::Eq,
        "!=" => lexer::Tok::NotEq,
        // Logical Operator
        "&&" => lexer::Tok::And,
        "||" => lexer::Tok::Or,
        // Bit Operator
        "&" => lexer::Tok::BitAnd,
        "^" => lexer::Tok::BitXor,
        "|" => lexer::Tok::BitOr,

        // Type
        // Static size
        "uint" => lexer::Tok::Uint256,
        "uint256" => lexer::Tok::Uint256,
        "int" => lexer::Tok::Int256,
        "int256" => lexer::Tok::Int256,
        "bytes32" => lexer::Tok::Bytes32,
        "bool" => lexer::Tok::Bool,
        // Dynamic size
        "bytes" => lexer::Tok::Bytes,
        "string" => lexer::Tok::String,
        "address" => lexer::Tok::Address,

        // Keyword
        "function" => lexer::Tok::Function,
        "if" => lexer::Tok::If,
        "else" => lexer::Tok::Else,
        "for" => lexer::Tok::For,
        "in" => lexer::Tok::In,
        // Mark
        "(" => lexer::Tok::LPar,
        ")" => lexer::Tok::RPar,
        "{" => lexer::Tok::LBrace,
        "}" => lexer::Tok::RBrace,
        ";" => lexer::Tok::Semi,
        "," => lexer::Tok::Comma,
        // Identifier
        name => lexer::Tok::Identifier { name: <String> },
        number => lexer::Tok::Num { number: <u64> },
    }
}
